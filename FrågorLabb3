1. Vad är syftet med att använda AsNoTracking i Entity Framework Core och hur påverkar det prestandan?
För att inte logiken ska trakas, och det sparar kraft och ökar prestanda



2. Hur fungerar Dependency Injection (DI) i ASP.NET Core och varför är det viktigt för att hantera DbContext? 
Dependency Injectction förenklar instanering av exempelvis Dbcontext. Ett exempel är här 
public class UserService {
    private readonly DbContexts _contexts;

    public UserService(DbContexts contexts) {
        _contexts = contexts;
    }
3. Vad är skillnaden mellan synkrona och asynkrona metoder i en webapplikation, och varför använde vi asynkrona metoder i våra endpoints?
Synkrona metoder kan leda till långasamma svarstider och därför använder vi ej denna metod i webb appar, då den väntar på att operationen ska bli färdig innan den går vidare till nästa.
Asynkrona metoder, kan utföra flera operationer samtidigt och behöver inte vänta på att en operation ska bli färdig.

4. Hur konfigurerar vi en databasanslutning i appsettings.json och hur används den i Program.cs?
Man lägger in en Connectionstring som man döper till ett namn för att som kopplas till en data source, i program.CS hämtar man sedan stringen med .GetConectionString.


5. Vad är fördelen med att använda Include-metoden när vi hämtar data med relationer i Entity Framework Core?
För att slippa ladda in relationerna på olika ställen och då kan vi visa de båda relationerna samtidigt.


6. Hur kan vi hantera cyclic data problem när vi serialiserar objekt med relationer i JSON?
Genom att lägga till en Json Serializer exempelvis 
builder.Services.ConfigureHttpJsonOptions(options => {
    options.SerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;


7. Vad är syftet med att använda ReferenceHandler.IgnoreCycles i JSON-serialisering och hur påverkar det resultatet?

För att hantera oändliga loopar såsom, exempelvis att vi har 2 stycken klass objekt som refererar till varandra exempelvis 
public Author Author { get; set; } som sedan referar till public List<Book> Books { get; set; } = new(); 

8. Hur kan vi använda Swagger för att testa våra API-endpoints och vad är fördelarna med detta verktyg?
Vi kan använda Swagger och testa olika crud operationer, de största fördelarna är att man har automatiskt genererade api anrop.

9. Vad är skillnaden mellan att använda MapGet direkt i Program.cs och att ha logiken i separata klasser?
Om man ska hämta ett api, exempelvis som weather forcast är det smidigt att ha det i program.cs men om man har flera endpoints så är det mer strukturerat att ha det i olika class libraries, DI fungerar inte i program.cs då det kräver objektorienterade instanser.

10. Hur kan vi uppdatera paketversioner i .csproj-filen och varför är det viktigt att hålla dem uppdaterade?
Vill man ha absolut senaste versionen så går man in i nuget packets och uppdaterar till senaste version, alternativt skriver i senaste version i .csproj, vill man ha senaste exempelvis sql server 9.0 och man ändrar till 9.0.* så får man senaste versionen av 9.0.
Det är viktigt för nya versioner innehåller ofta buggfixar samt för att kunna fungera med projekt som ligger på senare versioner.



Tester utförda i Swagger är GET (Read), och DELETE de andra operationerna fungerade dess. POST (Create) och PUT (Update) fungerade dessvärre inte då något är fel på API strukturen. 
